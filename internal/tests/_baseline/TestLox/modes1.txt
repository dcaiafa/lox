Parser Table
============
I0:
  S' = .S, EOF
  S = .token*, EOF
  token = .OBRACKET, EOF
  token = .OBRACKET, OBRACKET
  token = .OBRACKET, CBRACKET
  token = .OBRACKET, CLASS_DASH
  token = .OBRACKET, CLASS_CHAR
  token = .CBRACKET, EOF
  token = .CBRACKET, OBRACKET
  token = .CBRACKET, CBRACKET
  token = .CBRACKET, CLASS_DASH
  token = .CBRACKET, CLASS_CHAR
  token = .CLASS_DASH, EOF
  token = .CLASS_DASH, OBRACKET
  token = .CLASS_DASH, CBRACKET
  token = .CLASS_DASH, CLASS_DASH
  token = .CLASS_DASH, CLASS_CHAR
  token = .CLASS_CHAR, EOF
  token = .CLASS_CHAR, OBRACKET
  token = .CLASS_CHAR, CBRACKET
  token = .CLASS_CHAR, CLASS_DASH
  token = .CLASS_CHAR, CLASS_CHAR
  token* = .token+, EOF
  token* = ., EOF
  token+ = .token+ token, EOF
  token+ = .token+ token, OBRACKET
  token+ = .token+ token, CBRACKET
  token+ = .token+ token, CLASS_DASH
  token+ = .token+ token, CLASS_CHAR
  token+ = .token, EOF
  token+ = .token, OBRACKET
  token+ = .token, CBRACKET
  token+ = .token, CLASS_DASH
  token+ = .token, CLASS_CHAR
    on CBRACKET shift I1
    on CLASS_CHAR shift I2
    on CLASS_DASH shift I3
    on EOF reduce token*
    on OBRACKET shift I4
    on S goto I5
    on token goto I6
    on token* goto I7
    on token+ goto I8
I1:
  token = CBRACKET., EOF
  token = CBRACKET., OBRACKET
  token = CBRACKET., CBRACKET
  token = CBRACKET., CLASS_DASH
  token = CBRACKET., CLASS_CHAR
    on CBRACKET reduce token
    on CLASS_CHAR reduce token
    on CLASS_DASH reduce token
    on EOF reduce token
    on OBRACKET reduce token
I2:
  token = CLASS_CHAR., EOF
  token = CLASS_CHAR., OBRACKET
  token = CLASS_CHAR., CBRACKET
  token = CLASS_CHAR., CLASS_DASH
  token = CLASS_CHAR., CLASS_CHAR
    on CBRACKET reduce token
    on CLASS_CHAR reduce token
    on CLASS_DASH reduce token
    on EOF reduce token
    on OBRACKET reduce token
I3:
  token = CLASS_DASH., EOF
  token = CLASS_DASH., OBRACKET
  token = CLASS_DASH., CBRACKET
  token = CLASS_DASH., CLASS_DASH
  token = CLASS_DASH., CLASS_CHAR
    on CBRACKET reduce token
    on CLASS_CHAR reduce token
    on CLASS_DASH reduce token
    on EOF reduce token
    on OBRACKET reduce token
I4:
  token = OBRACKET., EOF
  token = OBRACKET., OBRACKET
  token = OBRACKET., CBRACKET
  token = OBRACKET., CLASS_DASH
  token = OBRACKET., CLASS_CHAR
    on CBRACKET reduce token
    on CLASS_CHAR reduce token
    on CLASS_DASH reduce token
    on EOF reduce token
    on OBRACKET reduce token
I5:
  S' = S., EOF
    on EOF accept
I6:
  token+ = token., EOF
  token+ = token., OBRACKET
  token+ = token., CBRACKET
  token+ = token., CLASS_DASH
  token+ = token., CLASS_CHAR
    on CBRACKET reduce token+
    on CLASS_CHAR reduce token+
    on CLASS_DASH reduce token+
    on EOF reduce token+
    on OBRACKET reduce token+
I7:
  S = token*., EOF
    on EOF reduce S
I8:
  token = .OBRACKET, EOF
  token = .OBRACKET, OBRACKET
  token = .OBRACKET, CBRACKET
  token = .OBRACKET, CLASS_DASH
  token = .OBRACKET, CLASS_CHAR
  token = .CBRACKET, EOF
  token = .CBRACKET, OBRACKET
  token = .CBRACKET, CBRACKET
  token = .CBRACKET, CLASS_DASH
  token = .CBRACKET, CLASS_CHAR
  token = .CLASS_DASH, EOF
  token = .CLASS_DASH, OBRACKET
  token = .CLASS_DASH, CBRACKET
  token = .CLASS_DASH, CLASS_DASH
  token = .CLASS_DASH, CLASS_CHAR
  token = .CLASS_CHAR, EOF
  token = .CLASS_CHAR, OBRACKET
  token = .CLASS_CHAR, CBRACKET
  token = .CLASS_CHAR, CLASS_DASH
  token = .CLASS_CHAR, CLASS_CHAR
  token* = token+., EOF
  token+ = token+ .token, EOF
  token+ = token+ .token, OBRACKET
  token+ = token+ .token, CBRACKET
  token+ = token+ .token, CLASS_DASH
  token+ = token+ .token, CLASS_CHAR
    on CBRACKET shift I1
    on CLASS_CHAR shift I2
    on CLASS_DASH shift I3
    on EOF reduce token*
    on OBRACKET shift I4
    on token goto I9
I9:
  token+ = token+ token., EOF
  token+ = token+ token., OBRACKET
  token+ = token+ token., CBRACKET
  token+ = token+ token., CLASS_DASH
  token+ = token+ token., CLASS_CHAR
    on CBRACKET reduce token+
    on CLASS_CHAR reduce token+
    on CLASS_DASH reduce token+
    on EOF reduce token+
    on OBRACKET reduce token+

Lexer Modes
============
$default:
digraph G {
  rankdir="LR";
  0 -> 1 [label="\\t-\\n"];
  0 -> 1 [label="\\r"];
  0 -> 1 [label=" "];
  0 -> 2 [label="["];
  1 -> 1 [label="\\t-\\n"];
  1 -> 1 [label="\\r"];
  1 -> 1 [label=" "];
  0 [label="0", shape="circle"];
  1 [label="1", shape="doublecircle"];
  2 [label="2", shape="doublecircle"];
}

CharClass:
digraph G {
  rankdir="LR";
  0 -> 1 [label="\\u0000-\\t"];
  0 -> 1 [label="\\u000b-\\u000c"];
  0 -> 1 [label="\\u000e-,"];
  0 -> 1 [label=".-Z"];
  0 -> 1 [label="["];
  0 -> 1 [label="^-m"];
  0 -> 1 [label="n"];
  0 -> 1 [label="o-q"];
  0 -> 1 [label="r"];
  0 -> 1 [label="s"];
  0 -> 1 [label="t"];
  0 -> 1 [label="u-\\uffff"];
  0 -> 2 [label="\\"];
  0 -> 3 [label="\\-"];
  0 -> 4 [label="]"];
  2 -> 1 [label="\\-"];
  2 -> 1 [label="\\"];
  2 -> 1 [label="n"];
  2 -> 1 [label="r"];
  2 -> 1 [label="t"];
  2 -> 1 [label="]"];
  2 -> 1 [label="["];
  0 [label="0", shape="circle"];
  1 [label="1", shape="doublecircle"];
  2 [label="2", shape="circle"];
  3 [label="3", shape="doublecircle"];
  4 [label="4", shape="doublecircle"];
}

Tests
=====
Input:
[a-zA-Z]
[\n \] \[]


Output:
OBRACKET [
CLASS_CHAR a
CLASS_DASH -
CLASS_CHAR z
CLASS_CHAR A
CLASS_DASH -
CLASS_CHAR Z
CBRACKET ]
OBRACKET [
CLASS_CHAR \n
CLASS_CHAR  
CLASS_CHAR \]
CLASS_CHAR  
CLASS_CHAR \[
CBRACKET ]

Input:
[a-f
]


Output:
OBRACKET [
CLASS_CHAR a
CLASS_DASH -
expr:1:5: unexpected character: 

expr:2:1: unexpected character: ]
Errors occurred.

