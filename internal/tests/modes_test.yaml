sources:
  - name: modes.lox
    data: |
      @lexer

      @macro HEX_CHAR = [0-9a-fA-F]

      NUM = [0-9]+
      ADD = '+'
      SUB = '-'

      OCURLY = '{' @push_mode()
      CCURLY = '}' @pop_mode

      @frag [ \r\n\t]+  @discard

      OBRACKET = '[' @push_mode(CharClass)
      @mode CharClass {
        CBRACKET   = ']' @pop_mode
        CLASS_DASH = '-'
        CLASS_CHAR = '\\'([nrt\\-] | ']' | '[') | ~[\r\n\\]
      }

      @frag '"' @push_mode(StringLiteral)
      @mode StringLiteral {
        STRING = '"' @pop_mode
        @frag '\\' [nrt"]
        @frag '\\u' HEX_CHAR HEX_CHAR HEX_CHAR HEX_CHAR
        @frag ~[\r\n]
      }

      @macro STRING_FRAG = '\\' [nrt"] 
                         | '\\u' HEX_CHAR HEX_CHAR HEX_CHAR HEX_CHAR
                         | ~[\r\n{}`]

      BACKTICK = '`' @push_mode(InterpString)
      @mode InterpString {
        @frag '`' @pop_mode @emit(BACKTICK)
        STRING_PIECE = STRING_FRAG+
        @frag '{' @push_mode() @emit(OCURLY)
      }

      @parser

      @start S = token*
               | @error


      token = NUM
            | ADD
            | SUB
            | OCURLY
            | CCURLY
            | OBRACKET 
            | CBRACKET
            | CLASS_DASH
            | CLASS_CHAR
            | STRING
            | BACKTICK
            | STRING_PIECE


  - name: parser.go
    data: |
      package main

      import (
        gotoken "go/token"
        "io"
        "os"
        "fmt"

        "github.com/dcaiafa/loxlex/simplelexer"

        "github.com/dcaiafa/lox/internal/base/errlogger"
      )

      type Token = simplelexer.Token

      func main() {
        input, err := io.ReadAll(os.Stdin)
        if err != nil {
          panic(err)
        }

        fset := gotoken.NewFileSet()
        file := fset.AddFile("expr", -1, len(input))
        errs := errlogger.New(fset, os.Stdout)

        var parser parser
        parser.errs = errs
        parser.fset = fset
        lex := simplelexer.New(simplelexer.Config{
          StateMachine: new(_LexerStateMachine),
          File: file,
          Input: input,
        })
        ok := parser.parse(lex)

        if !ok {
          fmt.Println("Failed to parse.")
          return
        }
        if errs.HasError() {
          fmt.Println("Errors occurred.")
          return
        }
      }

      type parser struct {
        lox
        fset   *gotoken.FileSet
        errs   *errlogger.ErrLogger
      }

      func (p *parser) on_S(tokens []Token) any {
        return nil
      }

      func (p *parser) on_S__error(e Error) any {
        if e.Token.Type != ERROR {
          p.errs.Errorf(
            e.Token.Pos,
            "unexpected %v", _TokenToString(e.Token.Type))
        } else {
          p.errs.Errorf(
            e.Token.Pos,
            "%v", e.Token.Err)
        }
        return nil
      }

      func (p *parser) on_token(t Token) Token {
        fmt.Println(_TokenToString(t.Type), string(t.Str))
        return t
      }

tests:
  - name: basic
    inputs:
      - |
        [a-zA-Z]
        [\n \] \[]

      - |
        [a-f
        ]

      - |
        "foo"
        "Hello\n \"Bob\" \u01f3"

      - |
        "\u012"

      - |
        [a-z]
        "foo"
        [0]
        "bar"

      - |
        10 - 20
        [10-20]
        10 + 20

      - |
        `there are {3+2} apples ` + "in the basket"
