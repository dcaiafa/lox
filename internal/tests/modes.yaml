sources:
  - name: modes.lox
    data: |
      @lexer

      @macro HEX_CHAR = [0-9a-fA-F] ;

      NUM = [0-9]+ ;
      ADD = '+'    ;
      SUB = '-'    ;

      @frag [ \r\n\t]+  @discard ;

      OBRACKET = '[' @push_mode(CharClass) ;
      @mode CharClass {
        CBRACKET   = ']' @pop_mode ;
        CLASS_DASH = '-' ; 
        CLASS_CHAR = '\\'([nrt\\-] | ']' | '[') | ~[\r\n\\] ;
      }

      @frag '"' @push_mode(StringLiteral) ;
      @mode StringLiteral {
        STRING = '"' @pop_mode ;
        @frag '\\' [nrt"] ;
        @frag '\\u' HEX_CHAR HEX_CHAR HEX_CHAR HEX_CHAR ;
        @frag ~[\r\n] ;
      }

      @parser

      @start
      S = token* ;

      token = NUM
            | ADD
            | SUB
            | OBRACKET 
            | CBRACKET
            | CLASS_DASH
            | CLASS_CHAR
            | STRING
            ;

  - name: parser.go
    data: |
      package main

      import (
        gotoken "go/token"
        "io"
        "os"
        "fmt"

        "github.com/dcaiafa/lox/internal/errlogger"
        "github.com/dcaiafa/lox/internal/base/baselexer"
      )

      type Token = baselexer.Token

      func main() {
        input, err := io.ReadAll(os.Stdin)
        if err != nil {
          panic(err)
        }

        fset := gotoken.NewFileSet()
        file := fset.AddFile("expr", -1, len(input))
        errs := errlogger.New(os.Stderr)

        onError := func(l *baselexer.Lexer) {
          errs.Errorf(file.Position(l.Pos()), "unexpected character: %c", l.Peek())
        }

        var parser parser
        parser.errs = errs
        parser.fset = fset
        lex := baselexer.New(new(_LexerStateMachine), onError, file, input)
        _ = parser.parse(lex)

        if errs.HasError() {
          fmt.Println("Errors occurred.")
          return
        }
      }

      type parser struct {
        lox
        fset   *gotoken.FileSet
        errs   *errlogger.ErrLogger
      }

      func (p *parser) on_S(tokens []Token) any {
        return nil
      }

      func (p *parser) on_token(t Token) Token {
        fmt.Println(_TokenToString(t.Type), string(t.Str))
        return t
      }

      func (p *parser) onError() {
        if p.errorToken().Type != ERROR {
          p.errs.Errorf(
            p.fset.Position(p.errorToken().Pos),
            "unexpected %v", _TokenToString(p.errorToken().Type))
        }
      }

inputs:
  - |
    [a-zA-Z]
    [\n \] \[]

  - |
    [a-f
    ]

  - |
    "foo"
    "Hello\n \"Bob\" \u01f3"

  - |
    "\u012"

  - |
    [a-z]
    "foo"
    [0]
    "bar"

  - |
    10 - 20
    [10-20]
    10 + 20

