sources:
  - name: parser.lox
    data: |
      @lexer

      NUM = [0-9]+;
      COMMA = ',';
      SEMICOLON = ';';
      OPAREN = '(';
      CPAREN = ')';
      HASH = '#';
      AT = '@';

      @frag [ \r\n\t]+  @discard;

      @parser

      @start
      S = list*;

      list = @list(pair, ',') ';';
      pair = prefix? '(' num ',' num ')' '#'?;
      num = NUM;
      prefix = '@';

  - name: parser.go
    data: |
      package main

      import (
        gotoken "go/token"
        "fmt"
        "io"
        "os"
        "strconv"

        "github.com/dcaiafa/loxlex/simplelexer"

        "github.com/dcaiafa/lox/internal/base/errlogger"
      )

      type Token = simplelexer.Token

      func main() {
        input, err := io.ReadAll(os.Stdin)
        if err != nil {
          panic(err)
        }

        fset := gotoken.NewFileSet()
        file := fset.AddFile("expr", -1, len(input))
        errs := errlogger.New(fset, os.Stdout)

        var parser testParser
        parser.errs = errs
        parser.fset = fset
        lex := simplelexer.New(simplelexer.Config{
          StateMachine: new(_LexerStateMachine),
          File: file,
          Input: input,
        })
        ok := parser.parse(lex)

        if !ok {
          fmt.Println("Failed to parse.")
          return
        }
        if errs.HasError() {
          fmt.Println("Errors occurred.")
          return
        }
      }

      type list struct {
        Pairs []pair
      }

      type pair struct {
        A, B int
      }

      type testParser struct {
        lox
        fset   *gotoken.FileSet
        errs   *errlogger.ErrLogger
      }

      func (p *testParser) on_S(l []*list) any  {
        return nil
      }

      func (p *testParser) on_list(pairs []pair, _ Token) *list {
        return &list{
          Pairs: pairs,
        }
      }

      func (p *testParser) on_pair(prefix any, _ Token, a int, _ Token, b int, _, _ Token) pair {
        return pair{A: a, B: b}
      }

      func (p *testParser) on_num(t Token) int {
        n, err := strconv.Atoi(string(t.Str))
        if err != nil {
          p.errs.Errorf(t.Pos, "invalid num: %v", err)
          return 0
        }
        return n
      }

      func (p *testParser) on_prefix(_ Token) any {
        return nil
      }

      func (p *testParser) _onBounds(v any, begin, end Token) {
        name := ""
        switch v.(type) {
        case *list:
          name = "list"
        case pair:
          name = "pair"
        default:
          return
        }
        fmt.Printf(
          "%v: (%v, %v)\n", 
          name, p.fset.Position(begin.Pos), p.fset.Position(end.Pos))
      }

inputs:
  - |
    (1, 2),
    (3, 4),
       (5, 6); (1, 2);
    (1,2), (3  , 4),  (5, 6)
           ;
     (9, 9);
