sources:
  - name: parser.lox
    data: |
      @lexer

      ID = [A-Za-z] [A-Za-z0-9_]*
      COMMA = ','
      SEMICOLON = ';'
      OPAREN = '('
      CPAREN = ')'
      OCURLY = '{'
      CCURLY = '}'

      @frag [ \r\n\t]+  @discard

      @parser

      @start S = block
               | @error


      block = '{' statement* '}'
            | @error '}'


      statement = func_call ';'
                | @error ';'
                | @error '{'
                | block


      func_call = ID '(' params? ')'

      params = @list(ID, ',')

  - name: parser.go
    data: |
      package main

      import (
        gotoken "go/token"
        "fmt"
        "io"
        "os"

        "github.com/dcaiafa/loxlex/simplelexer"

        "github.com/dcaiafa/lox/internal/base/errlogger"
      )

      type Token = simplelexer.Token

      func main() {
        input, err := io.ReadAll(os.Stdin)
        if err != nil {
          panic(err)
        }

        fset := gotoken.NewFileSet()
        file := fset.AddFile("expr", -1, len(input))
        errs := errlogger.New(fset, os.Stdout)

        var parser testParser
        parser.errs = errs
        parser.fset = fset
        lex := simplelexer.New(simplelexer.Config{
          StateMachine: new(_LexerStateMachine),
          File: file,
          Input: input,
        })
        ok := parser.parse(lex)

        if !ok {
          fmt.Println("Failed to parse.")
          return
        }
        if errs.HasError() {
          fmt.Println("Errors occurred.")
          return
        }
      }

      type testParser struct {
        lox
        fset   *gotoken.FileSet
        errs   *errlogger.ErrLogger
      }

      func (p *testParser) on_S(block struct{}) any  {
        return nil
      }

      func (p *testParser) on_S__error(e Error) any  {
        p.errs.Errorf(e.Token.Pos, "fatal: unexpected %v", _TokenToString(e.Token.Type))
        return nil
      }

      func (p *testParser) on_block(_ Token, ss []any, _ Token) struct{} {
        return struct{}{}
      }

      func (p *testParser) on_block__error(e Error, _ Token) struct{} {
        p.errs.Errorf(e.Token.Pos, "unexpected %v", _TokenToString(e.Token.Type))
        p.errs.Infof(e.Token.Pos, "recovered block")
        return struct{}{}
      }

      func (p *testParser) on_statement__func(f int, sc Token) any {
        return nil
      }

      func (p *testParser) on_statement__block(b any) any {
        return nil
      }

      func (p *testParser) on_statement__error(e Error, tok Token) any {
        if tok.Type == OCURLY {
          p.recoverLookahead(tok.Type, tok)
        }

        p.errs.Errorf(e.Token.Pos, "unexpected %v", _TokenToString(e.Token.Type))
        p.errs.Infof(e.Token.Pos, "recovered statement")
        return nil
      }

      func (p *testParser) on_func_call(n Token, _ Token, params []any, _ Token) int {
        p.errs.Infof(n.Pos, "parsed func %v", string(n.Str))
        return 0
      }

      func (p *testParser) on_params(params []Token) []any {
        return nil
      }

tests:
  - name: basic
    inputs:
      - |
        {
          f1(a, b, c);
          f2 a, f);
          f3(a, ;
          f4();
          f5(x, y
          {
            f6();
          }
        }
