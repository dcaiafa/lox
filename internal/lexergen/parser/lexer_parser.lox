@token 
  ID 
  LITERAL 
  CLASS_CHAR 

  SEMICOLON ';'
  EQ '='
  OR '|'
  ARROW '->'
  OCURLY '{'
  CCURLY '}'
  CLASS_DASH '-'
  TILDE '~'
  OBRACKET '['
  CBRACKET ']'
  OPAREN '('
  CPAREN ')'

  ZERO_OR_ONE '?'
  ZERO_OR_MORE '*'
  ONE_OR_MORE '+'
  ZERO_OR_MORE_NG '*?'
  ONE_OR_MORE_NG '+?'

  SKIP   '@skip'
  MACRO  '@macro'
  FRAG   '@frag'
  MODE   '@mode'
  PUSH_MODE '@push_mode'
  POP_MODE '@pop_mode'
  ;

spec = statement* ;

statement = mode | lexer_rule ;

lexer_rule = token_rule
           | frag_rule
           | macro_rule ;

mode = MODE ID '{' lexer_rule* '}' ;

token_rule  = ID '=' lexer_expr action* ';' ;
frag_rule   = FRAG lexer_expr action* ';' ;
macro_rule  = MACRO ID '=' lexer_expr ';' ;

lexer_expr = @list(lexer_factor, '|') ;

lexer_factor    = lexer_term_card+ ;
lexer_term_card = lexer_term lexer_card? ;
lexer_card      = '?' | '*' | '+' ;

lexer_term   = LITERAL
       | ID
       | char_class 
       | '(' lexer_expr ')' ;

char_class = '~'? '[' char_class_item+ ']' ;

char_class_item = CLASS_CHAR | '-' ;

action           = action_skip
                 | action_push_mode
                 | action_pop_mode ;
action_skip      = SKIP ;
action_push_mode = PUSH_MODE '(' ID ')' ;
action_pop_mode  = POP_MODE ;
