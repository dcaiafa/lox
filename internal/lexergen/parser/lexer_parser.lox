@token 
  ID 'identifier'
  LITERAL 'literal'
  CHAR 'character' //

  SEMICOLON ';'
  EQ '='
  OR '|'
  ARROW '->'
  OCURLY '{'
  CCURLY '}'
  DASH '-'
  HAT '^'
  TILDE '~'
  OBRACKET '['
  CBRACKET ']'
  OPAREN '('
  CPAREN ')'

  ZERO_OR_ONE '?'
  ZERO_OR_MORE '*'
  ONE_OR_MORE '+'
  ZERO_OR_MORE_NG '*?'
  ONE_OR_MORE_NG '+?'

  SKIP   '@skip'
  MACRO  '@macro'
  FRAG   '@frag'
  MODE   '@mode'
  PUSH_MODE '@push_mode'
  POP_MODE '@pop_mode'
  ;

spec = statement* ;

statement = rule | mode ;

rule = token_rule
     | frag_rule
     | macro_rule ;

mode = MODE ID '{' rule* '}' ;

token_rule  = ID '=' expr actions? ';' ;
frag_rule   = FRAG expr actions? ';' ;
macro_rule  = MACRO ID '=' expr ';' ;

expr = @list(factor, '|') ;

factor    = term_card+ ;
term_card = term card? ;
card      = '?' | '*' | '+' | '*?' | '+?' ;

term   = LITERAL
       | ID
       | char_class 
       | '(' expr ')' ;

char_class      = '~'? '[' char_class_item+ ']' ;

char_class_item = CHAR '-' CHAR
                | CHAR;

actions          = '->' action+ ;
action           = action_skip
                 | action_push_mode
                 | action_pop_mode ;
action_skip      = SKIP ;
action_push_mode = PUSH_MODE '(' ID ')' ;
action_pop_mode  = POP_MODE ;
