package parser



var _lexerMode0 = []uint32 {
	89, 157, 170, 175, 185, 229, 235, 241, 248, 264, 274, 284, 300, 310, 
326, 342, 352, 368, 384, 400, 410, 426, 442, 455, 471, 481, 497, 513, 
529, 545, 561, 571, 587, 612, 628, 647, 663, 679, 689, 705, 721, 731, 
747, 763, 779, 795, 805, 821, 837, 850, 866, 882, 892, 908, 921, 937, 
953, 963, 985, 1007, 1023, 1033, 1049, 1065, 1081, 1091, 1107, 1123, 1139, 1149, 
1165, 1181, 1188, 1204, 1220, 1224, 1240, 1247, 1257, 1261, 1265, 1269, 1273, 1277, 
1281, 1285, 1289, 1293, 1297, 67, 22, 9, 10, 1, 13, 13, 1, 32, 
32, 1, 39, 39, 6, 40, 40, 81, 41, 41, 80, 42, 42, 76, 
43, 43, 71, 44, 44, 87, 47, 47, 2, 48, 57, 7, 59, 59, 
88, 61, 61, 86, 63, 63, 79, 64, 64, 4, 65, 90, 8, 91, 
91, 5, 97, 122, 8, 123, 123, 84, 124, 124, 85, 125, 125, 83, 
126, 126, 82, 12, 3, 9, 10, 1, 13, 13, 1, 32, 32, 1, 
4, 0, 4, 1, 47, 47, 3, 9, 2, 0, 9, 3, 11, 65535, 
3, 4, 0, 43, 14, 95, 95, 9, 97, 99, 9, 100, 100, 31, 
101, 101, 26, 102, 102, 27, 103, 107, 9, 108, 108, 57, 109, 109, 
34, 110, 111, 9, 112, 112, 32, 113, 113, 9, 114, 114, 20, 115, 
115, 41, 116, 122, 9, 5, 0, 1, 1, 3, 33, 5, 0, 1, 
2, 5, 0, 6, 1, 48, 57, 7, 3, 31, 15, 4, 48, 57, 
8, 65, 90, 8, 95, 95, 8, 97, 122, 8, 3, 30, 9, 2, 
95, 95, 9, 97, 122, 9, 3, 29, 9, 2, 95, 95, 9, 97, 
122, 9, 3, 28, 15, 4, 95, 95, 9, 97, 115, 9, 116, 116, 
10, 117, 122, 9, 3, 29, 9, 2, 95, 95, 9, 97, 122, 9, 
3, 25, 15, 4, 95, 95, 9, 97, 103, 9, 104, 104, 11, 105, 
122, 9, 3, 29, 15, 4, 95, 95, 9, 97, 113, 9, 114, 114, 
12, 115, 122, 9, 3, 29, 9, 2, 95, 95, 9, 97, 122, 9, 
3, 21, 15, 4, 95, 95, 9, 97, 102, 9, 103, 103, 13, 104, 
122, 9, 3, 29, 15, 4, 95, 95, 9, 97, 110, 9, 111, 111, 
14, 112, 122, 9, 3, 29, 15, 4, 95, 95, 9, 97, 102, 9, 
103, 103, 15, 104, 122, 9, 3, 29, 9, 2, 95, 95, 9, 97, 
122, 9, 3, 22, 15, 4, 95, 95, 9, 97, 104, 9, 105, 105, 
16, 106, 122, 9, 3, 29, 15, 4, 95, 95, 9, 97, 113, 9, 
114, 114, 17, 115, 122, 9, 3, 29, 12, 3, 95, 95, 9, 97, 
97, 18, 98, 122, 9, 3, 29, 15, 4, 95, 95, 9, 97, 100, 
9, 101, 101, 19, 102, 122, 9, 3, 29, 9, 2, 95, 95, 9, 
97, 122, 9, 3, 20, 15, 4, 95, 95, 9, 97, 114, 9, 115, 
115, 33, 116, 122, 9, 3, 29, 15, 4, 95, 95, 9, 97, 113, 
9, 114, 114, 21, 115, 122, 9, 3, 29, 15, 4, 95, 95, 9, 
97, 113, 9, 114, 114, 22, 115, 122, 9, 3, 29, 15, 4, 95, 
95, 9, 97, 99, 9, 100, 100, 23, 101, 122, 9, 3, 29, 15, 
4, 95, 95, 9, 97, 110, 9, 111, 111, 24, 112, 122, 9, 3, 
29, 9, 2, 95, 95, 9, 97, 122, 9, 3, 19, 15, 4, 95, 
95, 9, 97, 104, 9, 105, 105, 25, 106, 122, 9, 3, 29, 24, 
7, 95, 95, 9, 97, 97, 52, 98, 110, 9, 111, 111, 39, 112, 
116, 9, 117, 117, 38, 118, 122, 9, 3, 29, 15, 4, 95, 95, 
9, 97, 98, 9, 99, 99, 48, 100, 122, 9, 3, 29, 18, 5, 
95, 95, 9, 97, 97, 42, 98, 110, 9, 111, 111, 28, 112, 122, 
9, 3, 29, 15, 4, 95, 95, 9, 97, 113, 9, 114, 114, 29, 
115, 122, 9, 3, 29, 15, 4, 95, 95, 9, 97, 99, 9, 100, 
100, 30, 101, 122, 9, 3, 29, 9, 2, 95, 95, 9, 97, 122, 
9, 3, 18, 15, 4, 95, 95, 9, 97, 114, 9, 115, 115, 46, 
116, 122, 9, 3, 29, 15, 4, 95, 95, 9, 97, 111, 9, 112, 
112, 40, 113, 122, 9, 3, 29, 9, 2, 95, 95, 47, 97, 122, 
9, 3, 29, 15, 4, 95, 95, 9, 97, 115, 9, 116, 116, 53, 
117, 122, 9, 3, 29, 15, 4, 95, 95, 9, 97, 98, 9, 99, 
99, 35, 100, 122, 9, 3, 29, 15, 4, 95, 95, 9, 97, 113, 
9, 114, 114, 36, 115, 122, 9, 3, 29, 15, 4, 95, 95, 9, 
97, 115, 9, 116, 116, 37, 117, 122, 9, 3, 29, 9, 2, 95, 
95, 9, 97, 122, 9, 3, 27, 15, 4, 95, 95, 9, 97, 103, 
9, 104, 104, 77, 105, 122, 9, 3, 29, 15, 4, 95, 95, 9, 
97, 108, 9, 109, 109, 61, 110, 122, 9, 3, 29, 12, 3, 95, 
95, 9, 97, 97, 43, 98, 122, 9, 3, 29, 15, 4, 95, 95, 
9, 97, 113, 9, 114, 114, 44, 115, 122, 9, 3, 29, 15, 4, 
95, 95, 9, 97, 115, 9, 116, 116, 45, 117, 122, 9, 3, 29, 
9, 2, 95, 95, 9, 97, 122, 9, 3, 26, 15, 4, 95, 95, 
9, 97, 113, 9, 114, 114, 65, 115, 122, 9, 3, 29, 12, 3, 
95, 95, 9, 97, 97, 49, 98, 122, 9, 3, 29, 15, 4, 95, 
95, 9, 97, 114, 9, 115, 115, 50, 116, 122, 9, 3, 29, 15, 
4, 95, 95, 9, 97, 115, 9, 116, 116, 51, 117, 122, 9, 3, 
29, 9, 2, 95, 95, 9, 97, 122, 9, 3, 17, 21, 6, 95, 
95, 9, 97, 100, 9, 101, 101, 58, 102, 104, 9, 105, 105, 54, 
106, 122, 9, 3, 29, 21, 6, 95, 95, 9, 97, 101, 9, 102, 
102, 55, 103, 119, 9, 120, 120, 62, 121, 122, 9, 3, 29, 15, 
4, 95, 95, 9, 97, 113, 9, 114, 114, 56, 115, 122, 9, 3, 
29, 9, 2, 95, 95, 9, 97, 122, 9, 3, 24, 15, 4, 95, 
95, 9, 97, 110, 9, 111, 111, 66, 112, 122, 9, 3, 29, 15, 
4, 95, 95, 9, 97, 100, 9, 101, 101, 59, 102, 122, 9, 3, 
29, 15, 4, 95, 95, 9, 97, 100, 9, 101, 101, 60, 102, 122, 
9, 3, 29, 9, 2, 95, 95, 9, 97, 122, 9, 3, 23, 15, 
4, 95, 95, 9, 97, 114, 9, 115, 115, 73, 116, 122, 9, 3, 
29, 15, 4, 95, 95, 9, 97, 99, 9, 100, 100, 63, 101, 122, 
9, 3, 29, 15, 4, 95, 95, 9, 97, 100, 9, 101, 101, 64, 
102, 122, 9, 3, 29, 9, 2, 95, 95, 9, 97, 122, 9, 3, 
16, 15, 4, 95, 95, 9, 97, 99, 9, 100, 100, 67, 101, 122, 
9, 3, 29, 15, 4, 95, 95, 9, 97, 113, 9, 114, 114, 68, 
115, 122, 9, 3, 29, 6, 1, 63, 63, 74, 3, 13, 15, 4, 
95, 95, 9, 97, 110, 9, 111, 111, 69, 112, 122, 9, 3, 29, 
15, 4, 95, 95, 9, 97, 100, 9, 101, 101, 70, 102, 122, 9, 
3, 29, 3, 0, 3, 15, 15, 4, 95, 95, 9, 97, 108, 9, 
109, 109, 72, 110, 122, 9, 3, 29, 6, 1, 63, 63, 78, 3, 
12, 9, 2, 95, 95, 75, 97, 122, 9, 3, 29, 3, 0, 3, 
14, 3, 0, 3, 11, 3, 0, 3, 10, 3, 0, 3, 9, 3, 
0, 3, 8, 3, 0, 3, 7, 3, 0, 3, 6, 3, 0, 3, 
5, 3, 0, 3, 4, 3, 0, 3, 3, 3, 0, 3, 2, 
}



var _lexerMode1 = []uint32 {
	13, 36, 40, 51, 79, 90, 94, 105, 111, 122, 133, 144, 155, 22, 
7, 0, 9, 1, 11, 44, 1, 45, 45, 5, 46, 91, 1, 92, 
92, 3, 93, 93, 7, 94, 65535, 1, 3, 0, 3, 36, 10, 3, 
48, 57, 12, 65, 70, 12, 97, 102, 12, 27, 8, 45, 45, 1, 
85, 85, 2, 92, 92, 1, 110, 110, 1, 114, 114, 1, 116, 116, 
1, 117, 117, 9, 120, 120, 6, 3, 36, 10, 3, 48, 57, 1, 
65, 70, 1, 97, 102, 1, 3, 0, 3, 35, 10, 3, 48, 57, 
4, 65, 70, 4, 97, 102, 4, 5, 0, 2, 0, 3, 34, 10, 
3, 48, 57, 6, 65, 70, 6, 97, 102, 6, 10, 3, 48, 57, 
8, 65, 70, 8, 97, 102, 8, 10, 3, 48, 57, 9, 65, 70, 
9, 97, 102, 9, 10, 3, 48, 57, 10, 65, 70, 10, 97, 102, 
10, 10, 3, 48, 57, 11, 65, 70, 11, 97, 102, 11, 
}



var _lexerMode2 = []uint32 {
	22, 42, 46, 57, 85, 42, 96, 42, 107, 118, 129, 42, 140, 151, 
162, 173, 42, 184, 195, 206, 212, 223, 19, 6, 0, 9, 1, 11, 
38, 1, 39, 39, 19, 40, 91, 1, 92, 92, 3, 93, 65535, 1, 
3, 0, 5, 0, 10, 3, 48, 57, 21, 65, 70, 21, 97, 102, 
21, 27, 8, 39, 39, 16, 85, 85, 2, 92, 92, 16, 110, 110, 
16, 114, 114, 16, 116, 116, 16, 117, 117, 18, 120, 120, 15, 5, 
0, 10, 3, 48, 57, 5, 65, 70, 5, 97, 102, 5, 10, 3, 
48, 57, 4, 65, 70, 4, 97, 102, 4, 10, 3, 48, 57, 6, 
65, 70, 6, 97, 102, 6, 10, 3, 48, 57, 7, 65, 70, 7, 
97, 102, 7, 10, 3, 48, 57, 9, 65, 70, 9, 97, 102, 9, 
10, 3, 48, 57, 8, 65, 70, 8, 97, 102, 8, 10, 3, 48, 
57, 10, 65, 70, 10, 97, 102, 10, 10, 3, 48, 57, 11, 65, 
70, 11, 97, 102, 11, 10, 3, 48, 57, 14, 65, 70, 14, 97, 
102, 14, 10, 3, 48, 57, 12, 65, 70, 12, 97, 102, 12, 10, 
3, 48, 57, 13, 65, 70, 13, 97, 102, 13, 5, 0, 2, 0, 
3, 32, 10, 3, 48, 57, 17, 65, 70, 17, 97, 102, 17, 10, 
3, 48, 57, 20, 65, 70, 20, 97, 102, 20, 
}




var _lexerModes = [][]uint32 {

	_lexerMode0,

	_lexerMode1,

	_lexerMode2,

}


const (
	_lexerConsume  = 0
	_lexerAccept   = 1
	_lexerDiscard  = 2
	_lexerTryAgain = 3
	_lexerEOF      = 4
	_lexerError    = -1
)

type _LexerStateMachine struct {
	token int
	state int
	mode  []uint32
	modeStack _Stack[[]uint32]
}

func (l *_LexerStateMachine) PushRune(r rune) int {
	if l.mode == nil {
		l.mode = _lexerMode0
	}

	mode := l.mode

	// Find the table row corresponding to state.
	i := int(mode[int(l.state)])
	count := int(mode[i])
	i++
	end := i + count

	// The format of the row is as follows:
	//
	//   gotoCount uint32
	//   [gotoCount]struct{
	//     rangeBegin uint32
	//     rangeEnd   uint32
	//     gotoState  uint32
	//   }
	//   [actionCount]struct {
	//     actionType  uint32
	//     actionParam uint32
	//   }
	//
	// Where 'actionCount' is determined by the amount of uint32 left in the row.

	gotoN := int(mode[i])
	i++

	// Use binary-search to find the next state.
	b := 0
	e := gotoN
	for b < e {
		j := b + (e-b)/2
		k := i + j*3
		switch {
		case r >= rune(mode[k]) && r <= rune(mode[k+1]):
			l.state = int(mode[k+2])
			return _lexerConsume
		case r < rune(mode[k]):
			e = j
		case r > rune(mode[k+1]):
			b = j + 1
		default:
			panic("not reached")
		}
	}

	// Move 'i' to the beginning of the actions section.
	i += gotoN * 3

	for ; i < end; i += 2 {
		switch mode[i] {
		case 1: // PushMode
			modeIndex := int(mode[i+1])
			l.modeStack.Push(mode)
			l.mode = _lexerModes[modeIndex]
		case 2: // PopMode
			l.mode = l.modeStack.Peek(0)
			l.modeStack.Pop(1)
		case 3: // Accept
			l.token = int(mode[i+1])
			l.state = 0
			return _lexerAccept
		case 4: // Discard
			l.state = 0
			return _lexerDiscard
		case 5: // Accum
			l.state = 0
			return _lexerTryAgain
		}
	}

	if l.state == 0 && r == 0 {
		return _lexerEOF
	}

	return _lexerError}

func (l *_LexerStateMachine) Reset() {
	l.mode = nil
	l.state = 0
}

func (l *_LexerStateMachine) Token() int {
	return l.token
}
