// Code generated by goyacc parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"reflect"

	"github.com/dcaiafa/lox/internal/ast"
	"github.com/dcaiafa/lox/internal/token"
)

func isNil(i interface{}) bool {
	if i == nil {
		return true
	}
	switch reflect.TypeOf(i).Kind() {
	case reflect.Ptr, reflect.Map, reflect.Array, reflect.Chan, reflect.Slice:
		//use of IsNil method
		return reflect.ValueOf(i).IsNil()
	}
	return false
}

func cast[T any](v any) T {
	if isNil(v) {
		var zero T
		return zero
	}
	return v.(T)
}

func listAppend[T any](xs any, x any) []T {
	return append(
		cast[[]T](xs),
		cast[T](x),
	)
}

func listOne[T any](x any) []T {
	return []T{
		cast[T](x),
	}
}

//line parser.y:46
type yySymType struct {
	yys  int
	tok  token.Token
	prod interface{}
}

const LEXERR = 57346
const ID = 57347
const LITERAL = 57348
const LABEL = 57349
const kLEXER = 57350
const kPARSER = 57351
const kCUSTOM = 57352

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEXERR",
	"ID",
	"LITERAL",
	"LABEL",
	"'='",
	"';'",
	"'|'",
	"'*'",
	"'+'",
	"'?'",
	"kLEXER",
	"kPARSER",
	"kCUSTOM",
	"'#'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 48

var yyAct = [...]int8{
	27, 29, 24, 31, 17, 19, 8, 7, 42, 43,
	44, 12, 34, 35, 25, 39, 21, 46, 32, 31,
	25, 22, 14, 20, 4, 1, 33, 23, 9, 18,
	37, 15, 16, 6, 36, 38, 45, 40, 41, 30,
	28, 26, 13, 10, 11, 5, 3, 2,
}

var yyPact = [...]int16{
	-8, -1000, -1000, -8, -1000, -1000, -1000, 17, -11, -1000,
	-1000, 17, -1000, -1000, 8, -1000, -11, -1000, -1000, 15,
	-1000, 14, -1000, 9, -1000, -1000, 3, -1000, -2, -1000,
	-3, -1000, -1000, -1000, -1000, 14, -1000, -1000, -1000, 12,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int8{
	0, 47, 46, 24, 45, 44, 43, 11, 42, 41,
	0, 40, 1, 39, 38, 37, 35, 34, 33, 32,
	31, 4, 29, 27, 2, 25,
}

var yyR1 = [...]int8{
	0, 25, 1, 2, 2, 3, 3, 4, 5, 5,
	6, 6, 7, 8, 9, 9, 10, 11, 11, 12,
	13, 14, 14, 14, 15, 15, 16, 17, 17, 18,
	19, 19, 20, 20, 21, 22, 23, 23, 24,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 1, 1, 1, 2, 2, 1,
	1, 0, 1, 4, 3, 1, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 0, 2, 1, 0, 2,
	2, 1, 1, 0, 1, 3, 2, 1, 1,
}

var yyChk = [...]int16{
	-1000, -25, -1, -2, -3, -4, -18, 15, 14, -3,
	-6, -5, -7, -8, 5, -20, -19, -21, -22, 16,
	-7, 8, -21, -23, -24, 5, -9, -10, -11, -12,
	-13, 5, 9, -24, 9, 10, -17, -12, -16, 17,
	-15, -14, 11, 12, 13, -10, 5,
}

var yyDef = [...]int8{
	0, -2, 1, 2, 4, 5, 6, 11, 33, 3,
	7, 10, 9, 12, 0, 29, 32, 31, 34, 0,
	8, 0, 30, 0, 37, 38, 0, 15, 28, 18,
	25, 20, 35, 36, 13, 0, 16, 17, 27, 0,
	19, 24, 21, 22, 23, 14, 26,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 17, 3, 3, 3, 3,
	3, 3, 11, 12, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 9,
	3, 8, 3, 13, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 10,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 14, 15, 16,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:86
		{
			yylex.(*lex).Spec = cast[*ast.Spec](yyDollar[1].prod)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:89
		{
			yyVAL.prod = &ast.Spec{
				Sections: cast[[]ast.Section](yyDollar[1].prod),
			}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:97
		{
			yyVAL.prod = append(
				cast[[]ast.Section](yyDollar[1].prod),
				cast[ast.Section](yyDollar[2].prod),
			)
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:104
		{
			yyVAL.prod = []ast.Section{
				cast[ast.Section](yyDollar[1].prod),
			}
		}
	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:114
		{
			yyVAL.prod = &ast.Parser{
				Decls: cast[[]ast.ParserDecl](yyDollar[2].prod),
			}
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:122
		{
			yyVAL.prod = listAppend[ast.ParserDecl](yyDollar[1].prod, yyDollar[2].prod)
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:126
		{
			yyVAL.prod = listOne[ast.ParserDecl](yyDollar[1].prod)
		}
	case 11:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:132
		{
			yyVAL.prod = nil
		}
	case 13:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:139
		{
			yyVAL.prod = &ast.Rule{
				Name:  yyDollar[1].tok.Str,
				Prods: cast[[]*ast.Prod](yyDollar[3].prod),
			}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:148
		{
			yyVAL.prod = append(
				cast[[]*ast.Prod](yyDollar[1].prod),
				cast[*ast.Prod](yyDollar[3].prod),
			)
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:155
		{
			yyVAL.prod = []*ast.Prod{
				cast[*ast.Prod](yyDollar[1].prod),
			}
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:163
		{
			yyVAL.prod = &ast.Prod{
				Terms: cast[[]*ast.Term](yyDollar[1].prod),
				Label: cast[*ast.Label](yyDollar[2].prod),
			}
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:172
		{
			yyVAL.prod = append(
				cast[[]*ast.Term](yyDollar[1].prod),
				cast[*ast.Term](yyDollar[2].prod),
			)
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:179
		{
			yyVAL.prod = []*ast.Term{
				cast[*ast.Term](yyDollar[1].prod),
			}
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:187
		{
			term := cast[*ast.Term](yyDollar[1].prod)
			qualifier := cast[ast.Qualifier](yyDollar[2].prod)
			term.Qualifier = qualifier
			yyVAL.prod = term
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:195
		{
			yyVAL.prod = &ast.Term{Name: yyDollar[1].tok.Str}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:198
		{
			yyVAL.prod = ast.ZeroOrMore
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:199
		{
			yyVAL.prod = ast.OneOrMore
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:200
		{
			yyVAL.prod = ast.ZeroOrOne
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:204
		{
			yyVAL.prod = ast.NoQualifier
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:208
		{
			yyVAL.prod = &ast.Label{
				Label: yyDollar[2].tok.Str,
			}
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:216
		{
			yyVAL.prod = nil
		}
	case 29:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:220
		{
			yyVAL.prod = &ast.Lexer{
				Decls: cast[[]ast.LexerDecl](yyDollar[2].prod),
			}
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:228
		{
			yyVAL.prod = listAppend[ast.LexerDecl](yyDollar[1].prod, yyDollar[2].prod)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:230
		{
			yyVAL.prod = listOne[ast.LexerDecl](yyDollar[1].prod)
		}
	case 33:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:235
		{
			yyVAL.prod = nil
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:242
		{
			yyVAL.prod = &ast.CustomTokenDecl{
				CustomTokens: cast[[]*ast.CustomToken](yyDollar[2].prod),
			}
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:250
		{
			yyVAL.prod = listAppend[*ast.CustomToken](yyDollar[1].prod, yyDollar[2].prod)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:254
		{
			yyVAL.prod = listOne[*ast.CustomToken](yyDollar[1].prod)
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:259
		{
			yyVAL.prod = &ast.CustomToken{Name: yyDollar[1].tok.Str}
		}
	}
	goto yystack /* stack new state and value */
}
