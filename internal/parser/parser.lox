//
//     __         ______     __  __
//    /\ \       /\  __ \   /\_\_\_\
//    \ \ \____  \ \ \/\ \  \/_/\_\/_
//     \ \_____\  \ \_____\   /\_\/\_\
//      \/_____/   \/_____/   \/_/\/_/
//
//

@lexer

COMMA       = ','
EQ          = '='
OR          = '|'
OCURLY      = '{'
CCURLY      = '}'
TILDE       = '~'
OPAREN      = '('
CPAREN      = ')'
SUB         = '-'

ZERO_OR_ONE    = '?'
ZERO_OR_MORE   = '*'
ONE_OR_MORE    = '+'
ZERO_OR_MORE_F = '*!'

PARSER         = '@parser'
LEXER          = '@lexer'
START          = '@start'
DISCARD        = '@discard'
MACRO          = '@macro'
FRAG           = '@frag'
MODE           = '@mode'
PUSH_MODE      = '@push_mode'
POP_MODE       = '@pop_mode'
ERROR_KEYWORD  = '@error'
LEFT           = '@left'
LIST           = '@list'
RIGHT          = '@right'
EMIT           = '@emit'
EMPTY          = '@empty'
EXTERNAL       = '@external'

// KEYWORD is a catch-all for keyword errors. Normally, keywords are a subset
// of identifiers but in Lox they start with @. Without KEYWORD, a typo like
// @frog would result in an unhelpful lexer error like "invalid character 'o'".
// N.B.: KEYWORD must be defined after all the actual keywords so they take
// priority.
KEYWORD = '@' [a-z_]+

ID = [A-Za-z] [A-Za-z0-9_]*

@macro HEX = [0-9a-fA-F]

NUM = [0-9]+

@frag '\'' @push_mode(Literal)
@mode Literal {
  LITERAL = '\'' @pop_mode
  @frag '\\' [\\'nrt]
  @frag '\\x' HEX HEX
  @frag '\\u' HEX HEX HEX HEX
  @frag '\\U' HEX HEX HEX HEX HEX HEX HEX HEX
  @frag ~[\\\n]
}

OBRACKET = '[' @push_mode(ClassChar)
@mode ClassChar {
  CBRACKET = ']' @pop_mode
  CLASS_DASH = '-'
  CLASS_CHAR = '\\' [\\nrt\-]
             | '\\x' HEX HEX
             | '\\u' HEX HEX HEX HEX
             | '\\U' HEX HEX HEX HEX HEX HEX HEX HEX
             | ~[\n-]

}

// Comments
@frag '//' ~[\n]*  @discard

// New lines and line extensions are handled by the augmented lexer.
// Check out lexer.go.
NL = '\n'
EXTEND = '\\'

// Whitespace
@frag [\t\r ]+  @discard

@parser

@start spec = NL* section*
            | @error

section = parser_section
        | lexer_section


// Parser
// ======

parser_section   = PARSER NL parser_statement*
parser_statement = parser_rule | NL

parser_rule      = '@start'? ID '=' @list(parser_prod, '|') NL
parser_prod      = parser_term_card+ parser_qualif?
                 | '@empty'

parser_term_card = parser_term parser_card?
parser_term      = ID | LITERAL | '@error' | parser_list
parser_list      = '@list' '(' parser_term ',' parser_term ')'
parser_card      = '*' | '*!' | '+' | '?'
parser_qualif    = '@left' '(' NUM ')'
                 | '@right' '(' NUM ')'

// Lexer
// =====

lexer_section = LEXER NL lexer_statement*!

lexer_statement = mode | lexer_rule

lexer_rule = token_rule
           | frag_rule
           | macro_rule
           | external_rule
           | NL

mode = MODE ID NL* '{' lexer_rule* '}'

token_rule    = ID '=' lexer_expr action* NL
frag_rule     = FRAG lexer_expr action* NL
macro_rule    = MACRO ID '=' lexer_expr NL
external_rule = EXTERNAL external_name+ NL
external_name = ID

lexer_expr = @list(lexer_factor, '|')

lexer_factor    = lexer_term_card+
lexer_term_card = lexer_term lexer_card?
lexer_card      = '?' | '*' | '+'

lexer_term = LITERAL
           | ID
           | char_class_expr
           | '(' lexer_expr ')'

char_class_expr = char_class SUB char_class
                | char_class

char_class = '~'? '[' char_class_item+ ']'

char_class_item = CLASS_CHAR | CLASS_DASH

action           = action_discard
                 | action_push_mode
                 | action_pop_mode
                 | action_emit
action_discard   = '@discard'
action_push_mode = '@push_mode' '(' ID? ')'
action_pop_mode  = '@pop_mode'
action_emit      = '@emit' '(' ID ')'
