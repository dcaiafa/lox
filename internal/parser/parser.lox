//
//     __         ______     __  __
//    /\ \       /\  __ \   /\_\_\_\
//    \ \ \____  \ \ \/\ \  \/_/\_\/_
//     \ \_____\  \ \_____\   /\_\/\_\
//      \/_____/   \/_____/   \/_/\/_/
//
//

@token
  ID
  LITERAL
  NUM

  ZERO_OR_MANY '*'
  ONE_OR_MANY  '+'
  ZERO_OR_ONE  '?'

  COMMA        ','
  CPAREN       ')'
  DEFINE       '='
  OPAREN       '('
  OR           '|'
  SEMICOLON    ';'

  TOKEN        '@token'
  LEFT         '@left'
  RIGHT        '@right'
  LIST         '@list' ;

parser    = decl* ;
decl      = rule | token_decl;
rule      = ID DEFINE @list(prod, OR) SEMICOLON ;
prod      = term_card+ qualif? ;
term_card = term card? ;
term      = ID | list ;
list      = LIST OPAREN term COMMA term CPAREN ;
card      = ZERO_OR_MANY | ONE_OR_MANY | ZERO_OR_ONE ;
qualif    = LEFT OPAREN NUM CPAREN
          | RIGHT OPAREN NUM CPAREN ;

token_decl = TOKEN token+ SEMICOLON ;

token = ID LITERAL? ;
