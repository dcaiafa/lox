package parser

var _lexerMode0 = []uint32{
	107, 185, 199, 205, 210, 222, 227, 272, 286, 293, 300, 308, 325, 336,
	347, 364, 375, 392, 409, 420, 437, 451, 468, 479, 496, 525, 548, 565,
	576, 593, 610, 627, 644, 661, 672, 689, 706, 723, 740, 757, 774, 785,
	802, 819, 836, 862, 879, 899, 913, 930, 941, 958, 975, 986, 1003, 1020,
	1037, 1054, 1065, 1082, 1096, 1113, 1130, 1141, 1164, 1181, 1198, 1209, 1226, 1243,
	1260, 1271, 1285, 1302, 1319, 1336, 1347, 1370, 1387, 1398, 1415, 1432, 1443, 1460,
	1477, 1488, 1505, 1522, 1530, 1547, 1564, 1569, 1586, 1597, 1608, 1613, 1618, 1623,
	1628, 1633, 1638, 1643, 1648, 1653, 1658, 1663, 1668, 77, 0, 25, 9, 9,
	1, 10, 10, 5, 13, 13, 1, 32, 32, 1, 39, 39, 9, 40,
	40, 100, 41, 41, 99, 42, 42, 92, 43, 43, 87, 44, 44, 106,
	45, 45, 98, 46, 46, 97, 47, 47, 2, 48, 57, 10, 61, 61,
	105, 63, 63, 96, 64, 64, 6, 65, 90, 11, 91, 91, 8, 92,
	92, 3, 97, 122, 11, 123, 123, 103, 124, 124, 104, 125, 125, 102,
	126, 126, 101, 13, 0, 3, 9, 9, 1, 13, 13, 1, 32, 32,
	1, 4, 0, 5, 0, 1, 47, 47, 4, 4, 0, 0, 3, 43,
	11, 0, 3, 0, 9, 4, 10, 10, 7, 11, 1114111, 4, 4, 0,
	0, 3, 42, 44, 0, 14, 95, 95, 12, 97, 99, 12, 100, 100,
	43, 101, 101, 24, 102, 102, 50, 103, 107, 12, 108, 108, 63, 109,
	109, 46, 110, 111, 12, 112, 112, 44, 113, 113, 12, 114, 114, 23,
	115, 115, 45, 116, 122, 12, 13, 1, 3, 0, 9, 4, 10, 10,
	7, 11, 1114111, 4, 4, 0, 6, 0, 0, 1, 1, 3, 38, 6,
	0, 0, 1, 2, 5, 0, 7, 0, 1, 48, 57, 10, 3, 36,
	16, 0, 4, 48, 57, 11, 65, 90, 11, 95, 95, 11, 97, 122,
	11, 3, 35, 10, 0, 2, 95, 95, 12, 97, 122, 12, 3, 34,
	10, 0, 2, 95, 95, 12, 97, 122, 12, 3, 30, 16, 0, 4,
	95, 95, 12, 97, 115, 12, 116, 116, 13, 117, 122, 12, 3, 34,
	10, 0, 2, 95, 95, 12, 97, 122, 12, 3, 33, 16, 0, 4,
	95, 95, 12, 97, 103, 12, 104, 104, 14, 105, 122, 12, 3, 34,
	16, 0, 4, 95, 95, 12, 97, 107, 12, 108, 108, 15, 109, 122,
	12, 3, 34, 10, 0, 2, 95, 95, 12, 97, 122, 12, 3, 32,
	16, 0, 4, 95, 95, 12, 97, 102, 12, 103, 103, 16, 104, 122,
	12, 3, 34, 13, 0, 3, 95, 95, 12, 97, 97, 17, 98, 122,
	12, 3, 34, 16, 0, 4, 95, 95, 12, 97, 120, 12, 121, 121,
	18, 122, 122, 12, 3, 34, 10, 0, 2, 95, 95, 12, 97, 122,
	12, 3, 31, 16, 0, 4, 95, 95, 12, 97, 104, 12, 105, 105,
	19, 106, 122, 12, 3, 34, 28, 0, 8, 95, 95, 12, 97, 108,
	12, 109, 109, 25, 110, 113, 12, 114, 114, 37, 115, 119, 12, 120,
	120, 34, 121, 122, 12, 3, 34, 22, 0, 6, 95, 95, 12, 97,
	104, 12, 105, 105, 26, 106, 111, 12, 112, 112, 31, 113, 122, 12,
	3, 34, 16, 0, 4, 95, 95, 12, 97, 115, 12, 116, 116, 22,
	117, 122, 12, 3, 34, 10, 0, 2, 95, 95, 12, 97, 122, 12,
	3, 27, 16, 0, 4, 95, 95, 12, 97, 100, 12, 101, 101, 29,
	102, 122, 12, 3, 34, 16, 0, 4, 95, 95, 12, 97, 113, 12,
	114, 114, 30, 115, 122, 12, 3, 34, 16, 0, 4, 95, 95, 12,
	97, 109, 12, 110, 110, 20, 111, 122, 12, 3, 34, 16, 0, 4,
	95, 95, 12, 97, 115, 12, 116, 116, 21, 117, 122, 12, 3, 34,
	16, 0, 4, 95, 95, 12, 97, 113, 12, 114, 114, 27, 115, 122,
	12, 3, 34, 10, 0, 2, 95, 95, 12, 97, 122, 12, 3, 23,
	16, 0, 4, 95, 95, 12, 97, 115, 12, 116, 116, 28, 117, 122,
	12, 3, 34, 16, 0, 4, 95, 95, 12, 97, 114, 12, 115, 115,
	36, 116, 122, 12, 3, 34, 16, 0, 4, 95, 95, 12, 97, 98,
	12, 99, 99, 59, 100, 122, 12, 3, 34, 16, 0, 4, 95, 95,
	12, 97, 113, 12, 114, 114, 38, 115, 122, 12, 3, 34, 16, 0,
	4, 95, 95, 12, 97, 110, 12, 111, 111, 32, 112, 122, 12, 3,
	34, 16, 0, 4, 95, 95, 12, 97, 102, 12, 103, 103, 33, 104,
	122, 12, 3, 34, 10, 0, 2, 95, 95, 12, 97, 122, 12, 3,
	24, 16, 0, 4, 95, 95, 12, 97, 114, 12, 115, 115, 58, 116,
	122, 12, 3, 34, 16, 0, 4, 95, 95, 12, 97, 113, 12, 114,
	114, 72, 115, 122, 12, 3, 34, 16, 0, 4, 95, 95, 12, 97,
	104, 12, 105, 105, 35, 106, 122, 12, 3, 34, 25, 0, 7, 95,
	95, 12, 97, 97, 42, 98, 110, 12, 111, 111, 51, 112, 116, 12,
	117, 117, 41, 118, 122, 12, 3, 34, 16, 0, 4, 95, 95, 12,
	97, 115, 12, 116, 116, 71, 117, 122, 12, 3, 34, 19, 0, 5,
	95, 95, 12, 97, 97, 54, 98, 110, 12, 111, 111, 55, 112, 122,
	12, 3, 34, 13, 0, 3, 95, 95, 12, 97, 97, 39, 98, 122,
	12, 3, 34, 16, 0, 4, 95, 95, 12, 97, 100, 12, 101, 101,
	40, 102, 122, 12, 3, 34, 10, 0, 2, 95, 95, 12, 97, 122,
	12, 3, 22, 16, 0, 4, 95, 95, 12, 97, 113, 12, 114, 114,
	47, 115, 122, 12, 3, 34, 16, 0, 4, 95, 95, 12, 97, 111,
	12, 112, 112, 52, 113, 122, 12, 3, 34, 10, 0, 2, 95, 95,
	53, 97, 122, 12, 3, 34, 16, 0, 4, 95, 95, 12, 97, 108,
	12, 109, 109, 67, 110, 122, 12, 3, 34, 16, 0, 4, 95, 95,
	12, 97, 98, 12, 99, 99, 60, 100, 122, 12, 3, 34, 16, 0,
	4, 95, 95, 12, 97, 99, 12, 100, 100, 48, 101, 122, 12, 3,
	34, 16, 0, 4, 95, 95, 12, 97, 110, 12, 111, 111, 49, 112,
	122, 12, 3, 34, 10, 0, 2, 95, 95, 12, 97, 122, 12, 3,
	21, 16, 0, 4, 95, 95, 12, 97, 103, 12, 104, 104, 93, 105,
	122, 12, 3, 34, 13, 0, 3, 95, 95, 12, 97, 97, 64, 98,
	122, 12, 3, 34, 16, 0, 4, 95, 95, 12, 97, 113, 12, 114,
	114, 56, 115, 122, 12, 3, 34, 16, 0, 4, 95, 95, 12, 97,
	99, 12, 100, 100, 57, 101, 122, 12, 3, 34, 10, 0, 2, 95,
	95, 12, 97, 122, 12, 3, 20, 22, 0, 6, 95, 95, 12, 97,
	100, 12, 101, 101, 76, 102, 104, 12, 105, 105, 73, 106, 122, 12,
	3, 34, 16, 0, 4, 95, 95, 12, 97, 113, 12, 114, 114, 61,
	115, 122, 12, 3, 34, 16, 0, 4, 95, 95, 12, 97, 115, 12,
	116, 116, 62, 117, 122, 12, 3, 34, 10, 0, 2, 95, 95, 12,
	97, 122, 12, 3, 29, 16, 0, 4, 95, 95, 12, 97, 110, 12,
	111, 111, 82, 112, 122, 12, 3, 34, 16, 0, 4, 95, 95, 12,
	97, 113, 12, 114, 114, 65, 115, 122, 12, 3, 34, 16, 0, 4,
	95, 95, 12, 97, 115, 12, 116, 116, 66, 117, 122, 12, 3, 34,
	10, 0, 2, 95, 95, 12, 97, 122, 12, 3, 28, 13, 0, 3,
	95, 95, 12, 97, 97, 68, 98, 122, 12, 3, 34, 16, 0, 4,
	95, 95, 12, 97, 114, 12, 115, 115, 89, 116, 122, 12, 3, 34,
	16, 0, 4, 95, 95, 12, 97, 114, 12, 115, 115, 69, 116, 122,
	12, 3, 34, 16, 0, 4, 95, 95, 12, 97, 115, 12, 116, 116,
	70, 117, 122, 12, 3, 34, 10, 0, 2, 95, 95, 12, 97, 122,
	12, 3, 19, 22, 0, 6, 95, 95, 12, 97, 101, 12, 102, 102,
	74, 103, 119, 12, 120, 120, 79, 121, 122, 12, 3, 34, 16, 0,
	4, 95, 95, 12, 97, 113, 12, 114, 114, 75, 115, 122, 12, 3,
	34, 10, 0, 2, 95, 95, 12, 97, 122, 12, 3, 26, 16, 0,
	4, 95, 95, 12, 97, 100, 12, 101, 101, 77, 102, 122, 12, 3,
	34, 16, 0, 4, 95, 95, 12, 97, 100, 12, 101, 101, 78, 102,
	122, 12, 3, 34, 10, 0, 2, 95, 95, 12, 97, 122, 12, 3,
	25, 16, 0, 4, 95, 95, 12, 97, 99, 12, 100, 100, 80, 101,
	122, 12, 3, 34, 16, 0, 4, 95, 95, 12, 97, 100, 12, 101,
	101, 81, 102, 122, 12, 3, 34, 10, 0, 2, 95, 95, 12, 97,
	122, 12, 3, 18, 16, 0, 4, 95, 95, 12, 97, 99, 12, 100,
	100, 83, 101, 122, 12, 3, 34, 16, 0, 4, 95, 95, 12, 97,
	113, 12, 114, 114, 84, 115, 122, 12, 3, 34, 7, 0, 1, 63,
	63, 90, 3, 15, 16, 0, 4, 95, 95, 12, 97, 110, 12, 111,
	111, 85, 112, 122, 12, 3, 34, 16, 0, 4, 95, 95, 12, 97,
	100, 12, 101, 101, 86, 102, 122, 12, 3, 34, 4, 0, 0, 3,
	16, 16, 0, 4, 95, 95, 12, 97, 108, 12, 109, 109, 88, 110,
	122, 12, 3, 34, 10, 0, 2, 33, 33, 94, 63, 63, 95, 3,
	13, 10, 0, 2, 95, 95, 91, 97, 122, 12, 3, 34, 4, 0,
	0, 3, 17, 4, 0, 0, 3, 14, 4, 0, 0, 3, 12, 4,
	0, 0, 3, 11, 4, 0, 0, 3, 10, 4, 0, 0, 3, 9,
	4, 0, 0, 3, 8, 4, 0, 0, 3, 7, 4, 0, 0, 3,
	6, 4, 0, 0, 3, 5, 4, 0, 0, 3, 4, 4, 0, 0,
	3, 3, 4, 0, 0, 3, 2,
}

var _lexerMode1 = []uint32{
	13, 37, 42, 54, 83, 95, 100, 112, 119, 131, 143, 155, 167, 23,
	0, 7, 0, 9, 1, 11, 44, 1, 45, 45, 5, 46, 91, 1,
	92, 92, 3, 93, 93, 7, 94, 1114111, 1, 4, 0, 0, 3, 41,
	11, 0, 3, 48, 57, 12, 65, 70, 12, 97, 102, 12, 28, 0,
	8, 45, 45, 1, 85, 85, 2, 92, 92, 1, 110, 110, 1, 114,
	114, 1, 116, 116, 1, 117, 117, 9, 120, 120, 6, 3, 41, 11,
	0, 3, 48, 57, 1, 65, 70, 1, 97, 102, 1, 4, 0, 0,
	3, 40, 11, 0, 3, 48, 57, 4, 65, 70, 4, 97, 102, 4,
	6, 0, 0, 2, 0, 3, 39, 11, 0, 3, 48, 57, 6, 65,
	70, 6, 97, 102, 6, 11, 0, 3, 48, 57, 8, 65, 70, 8,
	97, 102, 8, 11, 0, 3, 48, 57, 9, 65, 70, 9, 97, 102,
	9, 11, 0, 3, 48, 57, 10, 65, 70, 10, 97, 102, 10, 11,
	0, 3, 48, 57, 11, 65, 70, 11, 97, 102, 11,
}

var _lexerMode2 = []uint32{
	22, 43, 48, 43, 75, 43, 87, 43, 99, 111, 43, 123, 135, 147,
	159, 166, 178, 190, 202, 214, 226, 238, 20, 0, 6, 0, 9, 1,
	11, 38, 1, 39, 39, 14, 40, 91, 1, 92, 92, 2, 93, 1114111,
	1, 4, 0, 0, 5, 0, 26, 0, 8, 39, 39, 10, 85, 85,
	4, 92, 92, 10, 110, 110, 10, 114, 114, 10, 116, 116, 10, 117,
	117, 19, 120, 120, 17, 11, 0, 3, 48, 57, 21, 65, 70, 21,
	97, 102, 21, 11, 0, 3, 48, 57, 3, 65, 70, 3, 97, 102,
	3, 11, 0, 3, 48, 57, 6, 65, 70, 6, 97, 102, 6, 11,
	0, 3, 48, 57, 5, 65, 70, 5, 97, 102, 5, 11, 0, 3,
	48, 57, 8, 65, 70, 8, 97, 102, 8, 11, 0, 3, 48, 57,
	9, 65, 70, 9, 97, 102, 9, 11, 0, 3, 48, 57, 7, 65,
	70, 7, 97, 102, 7, 6, 0, 0, 2, 0, 3, 37, 11, 0,
	3, 48, 57, 11, 65, 70, 11, 97, 102, 11, 11, 0, 3, 48,
	57, 12, 65, 70, 12, 97, 102, 12, 11, 0, 3, 48, 57, 13,
	65, 70, 13, 97, 102, 13, 11, 0, 3, 48, 57, 15, 65, 70,
	15, 97, 102, 15, 11, 0, 3, 48, 57, 16, 65, 70, 16, 97,
	102, 16, 11, 0, 3, 48, 57, 18, 65, 70, 18, 97, 102, 18,
	11, 0, 3, 48, 57, 20, 65, 70, 20, 97, 102, 20,
}

var _lexerModes = [][]uint32{

	_lexerMode0,

	_lexerMode1,

	_lexerMode2,
}

// Flag for the mode table that indicates that the state is non-greedy
// accepting. At this state, the state machine is expected to accept the current
// string without attempting to consume additional input.
const _stateNonGreedyAccepting = 1

const (
	_lexerConsume  = 0
	_lexerAccept   = 1
	_lexerDiscard  = 2
	_lexerTryAgain = 3
	_lexerEOF      = 4
	_lexerError    = -1
)

type _LexerStateMachine struct {
	token     int
	state     int
	mode      []uint32
	modeStack _Stack[[]uint32]
}

func (l *_LexerStateMachine) PushRune(r rune) int {
	if l.mode == nil {
		l.mode = _lexerMode0
	}

	mode := l.mode

	// Find the table row corresponding to state.
	i := int(mode[int(l.state)])
	count := int(mode[i])
	i++
	end := i + count

	// The format of each row is as follows:
	//
	//   stateFlags uint32
	//   gotoCount uint32
	//   [gotoCount]struct{
	//     rangeBegin uint32
	//     rangeEnd   uint32
	//     gotoState  uint32
	//   }
	//   [actionCount]struct {
	//     actionType  uint32
	//     actionParam uint32
	//   }
	//
	// Where 'actionCount' is determined by the amount of uint32 left in the row.

	flags := mode[i]
	gotoN := int(mode[i+1])
	i += 2

	if flags&_stateNonGreedyAccepting == 0 {
		// Use binary-search to find the next state.
		b := 0
		e := gotoN
		for b < e {
			j := b + (e-b)/2
			k := i + j*3
			switch {
			case r >= rune(mode[k]) && r <= rune(mode[k+1]):
				l.state = int(mode[k+2])
				return _lexerConsume
			case r < rune(mode[k]):
				e = j
			case r > rune(mode[k+1]):
				b = j + 1
			default:
				panic("not reached")
			}
		}
	}

	// Move 'i' to the beginning of the actions section.
	i += gotoN * 3

	for ; i < end; i += 2 {
		switch mode[i] {
		case 1: // PushMode
			modeIndex := int(mode[i+1])
			l.modeStack.Push(mode)
			l.mode = _lexerModes[modeIndex]
		case 2: // PopMode
			if len(l.modeStack) == 0 {
				return _lexerError
			}
			l.mode = l.modeStack.Peek(0)
			l.modeStack.Pop(1)
		case 3: // Accept
			l.token = int(mode[i+1])
			l.state = 0
			return _lexerAccept
		case 4: // Discard
			l.state = 0
			return _lexerDiscard
		case 5: // Accum
			l.state = 0
			return _lexerTryAgain
		}
	}

	if l.state == 0 && r == -1 {
		return _lexerEOF
	}

	return _lexerError
}

func (l *_LexerStateMachine) Reset() {
	l.mode = nil
	l.state = 0
}

func (l *_LexerStateMachine) Token() int {
	return l.token
}
