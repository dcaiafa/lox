// Basic On LOX

@lexer

// Keywords
WHILE = 'while'
OR    = 'or'
AND   = 'and'
TRUE  = 'true'
FALSE = 'false'
IF    = 'if'
ELIF  = 'elif'
ELSE  = 'else'
NIL   = 'nil'
CONTINUE = 'continue'

// Identifier
ID = [A-Za-z_] [A-Za-z0-9_]*

// Misc.
OPAREN = '('
CPAREN = ')'
COMMA  = ','
ASSIGN = '='

OCURLY = '{' @push_mode()
CCURLY = '}' @pop_mode

// Operators
PLUS   = '+'
MINUS  = '-'
TIMES  = '*'
DIV    = '/'
LT     = '<'
LE     = '<='
GT     = '>'
GE     = '>='
EQ     = '=='

INT = '0' | [1-9] [0-9]*

// String literal with interpolation.
// For example: 
// "Hello {to_lower("WORLD")}"
STR_BEGIN = '"' @push_mode(String)
@mode String {
  STR_END = '"' @pop_mode
  CHAR_SEQ = (~["\n{}\\] | '\\' ["nrt{}\\])*

  // After matching a {, go to the "default" mode. We will return to the
  // String mode when } is matched and @pop_mode is processed. Notice that we
  // have to use @frag and @emit instead of a regular token because OCURLY is
  // already declared.
  @frag '{' @push_mode() @emit(OCURLY)
}

NL = '\n'

@macro WS = [ \r\t]

// Discard all whitespace.
@frag WS+ @discard

// Use \ for line continuation.
@frag '\\' WS* '\n' @discard

// Comments.
@frag '//' ~[\n]* @discard


@parser

@start program = block
               | @error

// N.B. The '*!' cardinality works the same as '*' but the parser will discard
// the extra NLs because Noop implements Discard() => true. It is a simple
// optimization where we can still use '*' without having to worry about using
// too much memory parsing a file full of empty lines.
block = stmt*!

stmt = func_call_stmt NL
     | var_assign NL
     | while_stmt NL
     | if_stmt NL
     | 'continue' NL
     | NL

while_stmt = 'while' expr '{' block '}'

func_call_stmt = func_call

if_stmt = 'if' expr '{' block '}' elif* else?
elif    = 'elif' expr '{' block '}' 
else    = 'else' '{' block '}'

var_assign = ID '=' expr

func_call = ID '(' @list(expr, ',')? ')'

expr = expr '*' expr    @left(5)
     | expr '/' expr    @left(5)
     | expr '+' expr    @left(4)
     | expr '-' expr    @left(4)
     | expr '<' expr    @left(3)
     | expr '<=' expr   @left(3)
     | expr '>' expr    @left(3)
     | expr '>=' expr   @left(3)
     | expr '==' expr   @left(3)
     | expr 'and' expr  @left(2)
     | expr 'or' expr   @left(1)
     | '(' expr ')' 
     | simple_expr

simple_expr = func_call
            | literal
            | var_ref

var_ref = ID

literal = INT | TRUE | FALSE | NIL | string

string = STR_BEGIN string_part* STR_END

string_part = CHAR_SEQ
            | '{' expr '}'
