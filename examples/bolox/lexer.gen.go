package main

var _lexerMode0 = []uint32{
	64, 181, 186, 201, 215, 227, 232, 239, 247, 252, 260, 265, 273, 278,
	286, 300, 305, 310, 315, 322, 329, 337, 342, 347, 352, 357, 374, 391,
	414, 431, 454, 477, 494, 517, 540, 563, 580, 603, 626, 655, 678, 695,
	718, 738, 761, 784, 807, 824, 847, 870, 893, 916, 939, 962, 979, 1002,
	1025, 1048, 1065, 1088, 1111, 1128, 1151, 1168, 116, 0, 38, 9, 9, 3,
	10, 10, 5, 13, 13, 3, 32, 32, 3, 34, 34, 6, 40, 40,
	24, 41, 41, 23, 42, 42, 15, 43, 43, 17, 44, 44, 22, 45,
	45, 16, 47, 47, 13, 48, 48, 8, 49, 57, 7, 60, 60, 11,
	61, 61, 20, 62, 62, 9, 65, 90, 25, 92, 92, 2, 95, 95,
	25, 97, 97, 55, 98, 98, 25, 99, 99, 54, 100, 100, 25, 101,
	101, 37, 102, 102, 42, 103, 104, 25, 105, 105, 45, 106, 109, 25,
	110, 110, 33, 111, 111, 61, 112, 115, 25, 116, 116, 43, 117, 118,
	25, 119, 119, 49, 120, 122, 25, 123, 123, 19, 125, 125, 18, 4,
	0, 0, 4, 0, 14, 0, 4, 9, 9, 2, 10, 10, 1, 13,
	13, 2, 32, 32, 2, 13, 0, 3, 9, 9, 3, 13, 13, 3,
	32, 32, 3, 4, 0, 11, 0, 3, 0, 9, 4, 10, 10, 14,
	11, 1114111, 4, 4, 0, 0, 3, 32, 6, 0, 0, 1, 1, 3,
	29, 7, 0, 1, 48, 57, 7, 3, 28, 4, 0, 0, 3, 28,
	7, 0, 1, 61, 61, 10, 3, 25, 4, 0, 0, 3, 26, 7,
	0, 1, 61, 61, 12, 3, 23, 4, 0, 0, 3, 24, 7, 0,
	1, 47, 47, 4, 3, 22, 13, 1, 3, 0, 9, 4, 10, 10,
	14, 11, 1114111, 4, 4, 0, 4, 0, 0, 3, 21, 4, 0, 0,
	3, 20, 4, 0, 0, 3, 19, 6, 0, 0, 2, 0, 3, 18,
	6, 0, 0, 1, 0, 3, 17, 7, 0, 1, 61, 61, 21, 3,
	16, 4, 0, 0, 3, 27, 4, 0, 0, 3, 15, 4, 0, 0,
	3, 14, 4, 0, 0, 3, 13, 16, 0, 4, 48, 57, 25, 65,
	90, 25, 95, 95, 25, 97, 122, 25, 3, 12, 16, 0, 4, 48,
	57, 25, 65, 90, 25, 95, 95, 25, 97, 122, 25, 3, 11, 22,
	0, 6, 48, 57, 25, 65, 90, 25, 95, 95, 25, 97, 100, 25,
	101, 101, 26, 102, 122, 25, 3, 12, 16, 0, 4, 48, 57, 25,
	65, 90, 25, 95, 95, 25, 97, 122, 25, 3, 10, 22, 0, 6,
	48, 57, 25, 65, 90, 25, 95, 95, 25, 97, 116, 25, 117, 117,
	27, 118, 122, 25, 3, 12, 22, 0, 6, 48, 57, 25, 65, 90,
	25, 95, 95, 25, 97, 107, 25, 108, 108, 28, 109, 122, 25, 3,
	12, 16, 0, 4, 48, 57, 25, 65, 90, 25, 95, 95, 25, 97,
	122, 25, 3, 9, 22, 0, 6, 48, 57, 25, 65, 90, 25, 95,
	95, 25, 97, 109, 25, 110, 110, 29, 111, 122, 25, 3, 12, 22,
	0, 6, 48, 57, 25, 65, 90, 25, 95, 95, 25, 97, 104, 25,
	105, 105, 30, 106, 122, 25, 3, 12, 22, 0, 6, 48, 57, 25,
	65, 90, 25, 95, 95, 25, 97, 100, 25, 101, 101, 31, 102, 122,
	25, 3, 12, 16, 0, 4, 48, 57, 25, 65, 90, 25, 95, 95,
	25, 97, 122, 25, 3, 8, 22, 0, 6, 48, 57, 25, 65, 90,
	25, 95, 95, 25, 97, 104, 25, 105, 105, 32, 106, 122, 25, 3,
	12, 22, 0, 6, 48, 57, 25, 65, 90, 25, 95, 95, 25, 97,
	107, 25, 108, 108, 38, 109, 122, 25, 3, 12, 28, 0, 8, 48,
	57, 25, 65, 90, 25, 95, 95, 25, 97, 104, 25, 105, 105, 39,
	106, 114, 25, 115, 115, 34, 116, 122, 25, 3, 12, 22, 0, 6,
	48, 57, 25, 65, 90, 25, 95, 95, 25, 97, 101, 25, 102, 102,
	35, 103, 122, 25, 3, 12, 16, 0, 4, 48, 57, 25, 65, 90,
	25, 95, 95, 25, 97, 122, 25, 3, 7, 22, 0, 6, 48, 57,
	25, 65, 90, 25, 95, 95, 25, 97, 115, 25, 116, 116, 36, 117,
	122, 25, 3, 12, 19, 0, 5, 48, 57, 25, 65, 90, 25, 95,
	95, 25, 97, 97, 48, 98, 122, 25, 3, 12, 22, 0, 6, 48,
	57, 25, 65, 90, 25, 95, 95, 25, 97, 113, 25, 114, 114, 51,
	115, 122, 25, 3, 12, 22, 0, 6, 48, 57, 25, 65, 90, 25,
	95, 95, 25, 97, 114, 25, 115, 115, 52, 116, 122, 25, 3, 12,
	22, 0, 6, 48, 57, 25, 65, 90, 25, 95, 95, 25, 97, 101,
	25, 102, 102, 40, 103, 122, 25, 3, 12, 16, 0, 4, 48, 57,
	25, 65, 90, 25, 95, 95, 25, 97, 122, 25, 3, 6, 22, 0,
	6, 48, 57, 25, 65, 90, 25, 95, 95, 25, 97, 109, 25, 110,
	110, 41, 111, 122, 25, 3, 12, 22, 0, 6, 48, 57, 25, 65,
	90, 25, 95, 95, 25, 97, 107, 25, 108, 108, 44, 109, 122, 25,
	3, 12, 22, 0, 6, 48, 57, 25, 65, 90, 25, 95, 95, 25,
	97, 103, 25, 104, 104, 50, 105, 122, 25, 3, 12, 22, 0, 6,
	48, 57, 25, 65, 90, 25, 95, 95, 25, 97, 104, 25, 105, 105,
	58, 106, 122, 25, 3, 12, 22, 0, 6, 48, 57, 25, 65, 90,
	25, 95, 95, 25, 97, 116, 25, 117, 117, 56, 118, 122, 25, 3,
	12, 22, 0, 6, 48, 57, 25, 65, 90, 25, 95, 95, 25, 97,
	100, 25, 101, 101, 46, 102, 122, 25, 3, 12, 16, 0, 4, 48,
	57, 25, 65, 90, 25, 95, 95, 25, 97, 122, 25, 3, 5, 22,
	0, 6, 48, 57, 25, 65, 90, 25, 95, 95, 25, 97, 110, 25,
	111, 111, 47, 112, 122, 25, 3, 12, 22, 0, 6, 48, 57, 25,
	65, 90, 25, 95, 95, 25, 97, 109, 25, 110, 110, 59, 111, 122,
	25, 3, 12, 22, 0, 6, 48, 57, 25, 65, 90, 25, 95, 95,
	25, 97, 100, 25, 101, 101, 53, 102, 122, 25, 3, 12, 16, 0,
	4, 48, 57, 25, 65, 90, 25, 95, 95, 25, 97, 122, 25, 3,
	4, 22, 0, 6, 48, 57, 25, 65, 90, 25, 95, 95, 25, 97,
	107, 25, 108, 108, 63, 109, 122, 25, 3, 12, 22, 0, 6, 48,
	57, 25, 65, 90, 25, 95, 95, 25, 97, 99, 25, 100, 100, 57,
	101, 122, 25, 3, 12, 16, 0, 4, 48, 57, 25, 65, 90, 25,
	95, 95, 25, 97, 122, 25, 3, 3, 22, 0, 6, 48, 57, 25,
	65, 90, 25, 95, 95, 25, 97, 113, 25, 114, 114, 60, 115, 122,
	25, 3, 12, 16, 0, 4, 48, 57, 25, 65, 90, 25, 95, 95,
	25, 97, 122, 25, 3, 2, 22, 0, 6, 48, 57, 25, 65, 90,
	25, 95, 95, 25, 97, 100, 25, 101, 101, 62, 102, 122, 25, 3,
	12,
}

var _lexerMode1 = []uint32{
	5, 37, 61, 68, 94, 31, 0, 9, 0, 9, 3, 11, 33, 3,
	34, 34, 4, 35, 91, 3, 92, 92, 1, 93, 122, 3, 123, 123,
	2, 124, 124, 3, 126, 1114111, 3, 3, 31, 23, 0, 7, 34, 34,
	3, 92, 92, 3, 110, 110, 3, 114, 114, 3, 116, 116, 3, 123,
	123, 3, 125, 125, 3, 6, 0, 0, 1, 0, 3, 17, 25, 0,
	7, 0, 9, 3, 11, 33, 3, 35, 91, 3, 92, 92, 1, 93,
	122, 3, 124, 124, 3, 126, 1114111, 3, 3, 31, 6, 0, 0, 2,
	0, 3, 30,
}

var _lexerModes = [][]uint32{

	_lexerMode0,

	_lexerMode1,
}

// Flag for the mode table that indicates that the state is non-greedy
// accepting. At this state, the state machine is expected to accept the current
// string without attempting to consume additional input.
const _stateNonGreedyAccepting = 1

const (
	_lexerConsume  = 0
	_lexerAccept   = 1
	_lexerDiscard  = 2
	_lexerTryAgain = 3
	_lexerEOF      = 4
	_lexerError    = -1
)

type _LexerStateMachine struct {
	token     int
	state     int
	mode      []uint32
	modeStack _Stack[[]uint32]
}

func (l *_LexerStateMachine) PushRune(r rune) int {
	if l.mode == nil {
		l.mode = _lexerMode0
	}

	mode := l.mode

	// Find the table row corresponding to state.
	i := int(mode[int(l.state)])
	count := int(mode[i])
	i++
	end := i + count

	// The format of each row is as follows:
	//
	//   stateFlags uint32
	//   gotoCount uint32
	//   [gotoCount]struct{
	//     rangeBegin uint32
	//     rangeEnd   uint32
	//     gotoState  uint32
	//   }
	//   [actionCount]struct {
	//     actionType  uint32
	//     actionParam uint32
	//   }
	//
	// Where 'actionCount' is determined by the amount of uint32 left in the row.

	flags := mode[i]
	gotoN := int(mode[i+1])
	i += 2

	if flags&_stateNonGreedyAccepting == 0 {
		// Use binary-search to find the next state.
		b := 0
		e := gotoN
		for b < e {
			j := b + (e-b)/2
			k := i + j*3
			switch {
			case r >= rune(mode[k]) && r <= rune(mode[k+1]):
				l.state = int(mode[k+2])
				return _lexerConsume
			case r < rune(mode[k]):
				e = j
			case r > rune(mode[k+1]):
				b = j + 1
			default:
				panic("not reached")
			}
		}
	}

	// Move 'i' to the beginning of the actions section.
	i += gotoN * 3

	for ; i < end; i += 2 {
		switch mode[i] {
		case 1: // PushMode
			modeIndex := int(mode[i+1])
			l.modeStack.Push(mode)
			l.mode = _lexerModes[modeIndex]
		case 2: // PopMode
			if len(l.modeStack) == 0 {
				return _lexerError
			}
			l.mode = l.modeStack.Peek(0)
			l.modeStack.Pop(1)
		case 3: // Accept
			l.token = int(mode[i+1])
			l.state = 0
			return _lexerAccept
		case 4: // Discard
			l.state = 0
			return _lexerDiscard
		case 5: // Accum
			l.state = 0
			return _lexerTryAgain
		}
	}

	if l.state == 0 && r == -1 {
		return _lexerEOF
	}

	return _lexerError
}

func (l *_LexerStateMachine) Reset() {
	l.mode = nil
	l.state = 0
}

func (l *_LexerStateMachine) Token() int {
	return l.token
}
