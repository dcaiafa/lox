package main

var _lexerMode0 = []uint32{
	63, 179, 183, 197, 210, 214, 220, 227, 231, 238, 242, 249, 253, 260,
	270, 274, 278, 282, 288, 294, 301, 305, 309, 313, 317, 333, 349, 371,
	387, 409, 431, 447, 469, 491, 513, 529, 551, 573, 601, 623, 639, 661,
	680, 702, 724, 746, 762, 784, 806, 828, 850, 872, 894, 910, 932, 954,
	976, 992, 1014, 1036, 1052, 1074, 1090, 115, 38, 9, 9, 3, 10, 10,
	4, 13, 13, 3, 32, 32, 3, 34, 34, 5, 40, 40, 23, 41,
	41, 22, 42, 42, 14, 43, 43, 16, 44, 44, 21, 45, 45, 15,
	47, 47, 12, 48, 48, 7, 49, 57, 6, 60, 60, 10, 61, 61,
	19, 62, 62, 8, 65, 90, 24, 92, 92, 2, 95, 95, 24, 97,
	97, 54, 98, 98, 24, 99, 99, 53, 100, 100, 24, 101, 101, 36,
	102, 102, 41, 103, 104, 24, 105, 105, 44, 106, 109, 24, 110, 110,
	32, 111, 111, 60, 112, 115, 24, 116, 116, 42, 117, 118, 24, 119,
	119, 48, 120, 122, 24, 123, 123, 18, 125, 125, 17, 3, 0, 4,
	0, 13, 4, 9, 9, 2, 10, 10, 1, 13, 13, 2, 32, 32,
	2, 12, 3, 9, 9, 3, 13, 13, 3, 32, 32, 3, 4, 0,
	3, 0, 3, 32, 5, 0, 1, 1, 3, 29, 6, 1, 48, 57,
	6, 3, 28, 3, 0, 3, 28, 6, 1, 61, 61, 9, 3, 25,
	3, 0, 3, 26, 6, 1, 61, 61, 11, 3, 23, 3, 0, 3,
	24, 6, 1, 47, 47, 13, 3, 22, 9, 2, 0, 9, 13, 11,
	1114111, 13, 4, 0, 3, 0, 3, 21, 3, 0, 3, 20, 3, 0,
	3, 19, 5, 0, 2, 0, 3, 18, 5, 0, 1, 0, 3, 17,
	6, 1, 61, 61, 20, 3, 16, 3, 0, 3, 27, 3, 0, 3,
	15, 3, 0, 3, 14, 3, 0, 3, 13, 15, 4, 48, 57, 24,
	65, 90, 24, 95, 95, 24, 97, 122, 24, 3, 12, 15, 4, 48,
	57, 24, 65, 90, 24, 95, 95, 24, 97, 122, 24, 3, 11, 21,
	6, 48, 57, 24, 65, 90, 24, 95, 95, 24, 97, 100, 24, 101,
	101, 25, 102, 122, 24, 3, 12, 15, 4, 48, 57, 24, 65, 90,
	24, 95, 95, 24, 97, 122, 24, 3, 10, 21, 6, 48, 57, 24,
	65, 90, 24, 95, 95, 24, 97, 116, 24, 117, 117, 26, 118, 122,
	24, 3, 12, 21, 6, 48, 57, 24, 65, 90, 24, 95, 95, 24,
	97, 107, 24, 108, 108, 27, 109, 122, 24, 3, 12, 15, 4, 48,
	57, 24, 65, 90, 24, 95, 95, 24, 97, 122, 24, 3, 9, 21,
	6, 48, 57, 24, 65, 90, 24, 95, 95, 24, 97, 109, 24, 110,
	110, 28, 111, 122, 24, 3, 12, 21, 6, 48, 57, 24, 65, 90,
	24, 95, 95, 24, 97, 104, 24, 105, 105, 29, 106, 122, 24, 3,
	12, 21, 6, 48, 57, 24, 65, 90, 24, 95, 95, 24, 97, 100,
	24, 101, 101, 30, 102, 122, 24, 3, 12, 15, 4, 48, 57, 24,
	65, 90, 24, 95, 95, 24, 97, 122, 24, 3, 8, 21, 6, 48,
	57, 24, 65, 90, 24, 95, 95, 24, 97, 104, 24, 105, 105, 31,
	106, 122, 24, 3, 12, 21, 6, 48, 57, 24, 65, 90, 24, 95,
	95, 24, 97, 107, 24, 108, 108, 37, 109, 122, 24, 3, 12, 27,
	8, 48, 57, 24, 65, 90, 24, 95, 95, 24, 97, 104, 24, 105,
	105, 38, 106, 114, 24, 115, 115, 33, 116, 122, 24, 3, 12, 21,
	6, 48, 57, 24, 65, 90, 24, 95, 95, 24, 97, 101, 24, 102,
	102, 34, 103, 122, 24, 3, 12, 15, 4, 48, 57, 24, 65, 90,
	24, 95, 95, 24, 97, 122, 24, 3, 7, 21, 6, 48, 57, 24,
	65, 90, 24, 95, 95, 24, 97, 115, 24, 116, 116, 35, 117, 122,
	24, 3, 12, 18, 5, 48, 57, 24, 65, 90, 24, 95, 95, 24,
	97, 97, 47, 98, 122, 24, 3, 12, 21, 6, 48, 57, 24, 65,
	90, 24, 95, 95, 24, 97, 113, 24, 114, 114, 50, 115, 122, 24,
	3, 12, 21, 6, 48, 57, 24, 65, 90, 24, 95, 95, 24, 97,
	114, 24, 115, 115, 51, 116, 122, 24, 3, 12, 21, 6, 48, 57,
	24, 65, 90, 24, 95, 95, 24, 97, 101, 24, 102, 102, 39, 103,
	122, 24, 3, 12, 15, 4, 48, 57, 24, 65, 90, 24, 95, 95,
	24, 97, 122, 24, 3, 6, 21, 6, 48, 57, 24, 65, 90, 24,
	95, 95, 24, 97, 109, 24, 110, 110, 40, 111, 122, 24, 3, 12,
	21, 6, 48, 57, 24, 65, 90, 24, 95, 95, 24, 97, 107, 24,
	108, 108, 43, 109, 122, 24, 3, 12, 21, 6, 48, 57, 24, 65,
	90, 24, 95, 95, 24, 97, 103, 24, 104, 104, 49, 105, 122, 24,
	3, 12, 21, 6, 48, 57, 24, 65, 90, 24, 95, 95, 24, 97,
	104, 24, 105, 105, 57, 106, 122, 24, 3, 12, 21, 6, 48, 57,
	24, 65, 90, 24, 95, 95, 24, 97, 116, 24, 117, 117, 55, 118,
	122, 24, 3, 12, 21, 6, 48, 57, 24, 65, 90, 24, 95, 95,
	24, 97, 100, 24, 101, 101, 45, 102, 122, 24, 3, 12, 15, 4,
	48, 57, 24, 65, 90, 24, 95, 95, 24, 97, 122, 24, 3, 5,
	21, 6, 48, 57, 24, 65, 90, 24, 95, 95, 24, 97, 110, 24,
	111, 111, 46, 112, 122, 24, 3, 12, 21, 6, 48, 57, 24, 65,
	90, 24, 95, 95, 24, 97, 109, 24, 110, 110, 58, 111, 122, 24,
	3, 12, 21, 6, 48, 57, 24, 65, 90, 24, 95, 95, 24, 97,
	100, 24, 101, 101, 52, 102, 122, 24, 3, 12, 15, 4, 48, 57,
	24, 65, 90, 24, 95, 95, 24, 97, 122, 24, 3, 4, 21, 6,
	48, 57, 24, 65, 90, 24, 95, 95, 24, 97, 107, 24, 108, 108,
	62, 109, 122, 24, 3, 12, 21, 6, 48, 57, 24, 65, 90, 24,
	95, 95, 24, 97, 99, 24, 100, 100, 56, 101, 122, 24, 3, 12,
	15, 4, 48, 57, 24, 65, 90, 24, 95, 95, 24, 97, 122, 24,
	3, 3, 21, 6, 48, 57, 24, 65, 90, 24, 95, 95, 24, 97,
	113, 24, 114, 114, 59, 115, 122, 24, 3, 12, 15, 4, 48, 57,
	24, 65, 90, 24, 95, 95, 24, 97, 122, 24, 3, 2, 21, 6,
	48, 57, 24, 65, 90, 24, 95, 95, 24, 97, 100, 24, 101, 101,
	61, 102, 122, 24, 3, 12,
}

var _lexerMode1 = []uint32{
	5, 36, 59, 65, 90, 30, 9, 0, 9, 3, 11, 33, 3, 34,
	34, 4, 35, 91, 3, 92, 92, 1, 93, 122, 3, 123, 123, 2,
	124, 124, 3, 126, 1114111, 3, 3, 31, 22, 7, 34, 34, 3, 92,
	92, 3, 110, 110, 3, 114, 114, 3, 116, 116, 3, 123, 123, 3,
	125, 125, 3, 5, 0, 1, 0, 3, 17, 24, 7, 0, 9, 3,
	11, 33, 3, 35, 91, 3, 92, 92, 1, 93, 122, 3, 124, 124,
	3, 126, 1114111, 3, 3, 31, 5, 0, 2, 0, 3, 30,
}

var _lexerModes = [][]uint32{

	_lexerMode0,

	_lexerMode1,
}

const (
	_lexerConsume  = 0
	_lexerAccept   = 1
	_lexerDiscard  = 2
	_lexerTryAgain = 3
	_lexerEOF      = 4
	_lexerError    = -1
)

type _LexerStateMachine struct {
	token     int
	state     int
	mode      []uint32
	modeStack _Stack[[]uint32]
}

func (l *_LexerStateMachine) PushRune(r rune) int {
	if l.mode == nil {
		l.mode = _lexerMode0
	}

	mode := l.mode

	// Find the table row corresponding to state.
	i := int(mode[int(l.state)])
	count := int(mode[i])
	i++
	end := i + count

	// The format of the row is as follows:
	//
	//   gotoCount uint32
	//   [gotoCount]struct{
	//     rangeBegin uint32
	//     rangeEnd   uint32
	//     gotoState  uint32
	//   }
	//   [actionCount]struct {
	//     actionType  uint32
	//     actionParam uint32
	//   }
	//
	// Where 'actionCount' is determined by the amount of uint32 left in the row.

	gotoN := int(mode[i])
	i++

	// Use binary-search to find the next state.
	b := 0
	e := gotoN
	for b < e {
		j := b + (e-b)/2
		k := i + j*3
		switch {
		case r >= rune(mode[k]) && r <= rune(mode[k+1]):
			l.state = int(mode[k+2])
			return _lexerConsume
		case r < rune(mode[k]):
			e = j
		case r > rune(mode[k+1]):
			b = j + 1
		default:
			panic("not reached")
		}
	}

	// Move 'i' to the beginning of the actions section.
	i += gotoN * 3

	for ; i < end; i += 2 {
		switch mode[i] {
		case 1: // PushMode
			modeIndex := int(mode[i+1])
			l.modeStack.Push(mode)
			l.mode = _lexerModes[modeIndex]
		case 2: // PopMode
			l.mode = l.modeStack.Peek(0)
			l.modeStack.Pop(1)
		case 3: // Accept
			l.token = int(mode[i+1])
			l.state = 0
			return _lexerAccept
		case 4: // Discard
			l.state = 0
			return _lexerDiscard
		case 5: // Accum
			l.state = 0
			return _lexerTryAgain
		}
	}

	if l.state == 0 && r == 0 {
		return _lexerEOF
	}

	return _lexerError
}

func (l *_LexerStateMachine) Reset() {
	l.mode = nil
	l.state = 0
}

func (l *_LexerStateMachine) Token() int {
	return l.token
}
